#include <benchmark/benchmark.h>
#include <vec.hpp>
// #include <types_vec.hpp>
#include <setup_structs.hpp>
#include <iostream>
#include <iterator_vec.hpp>
#include <iterator_cvec.hpp>

static void BM_vec2_copy(benchmark::State &state)
{
    line::vec<10, float> vec1(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);
    line::vec<10, float> expected(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);

    for (auto _ : state)
    {
        for (int i = 0; i < 1000; ++i)
        {
            vec1 + expected;
        }
    }
}

static void BM_vec4_constructor(benchmark::State &state)
{

    for (auto _ : state)
    {
        for (int i = 0; i < 10000; ++i)
        {
            line::vec<430, float> vec1{
                1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f,
                11.0f, 12.0f, 13.0f, 14.0f, 15.0f, 16.0f, 17.0f, 18.0f, 19.0f, 20.0f,
                21.0f, 22.0f, 23.0f, 24.0f, 25.0f, 26.0f, 27.0f, 28.0f, 29.0f, 30.0f,
                31.0f, 32.0f, 33.0f, 34.0f, 35.0f, 36.0f, 37.0f, 38.0f, 39.0f, 40.0f,
                41.0f, 42.0f, 43.0f, 44.0f, 45.0f, 46.0f, 47.0f, 48.0f, 49.0f, 50.0f,
                51.0f, 52.0f, 53.0f, 54.0f, 55.0f, 56.0f, 57.0f, 58.0f, 59.0f, 60.0f,
                61.0f, 62.0f, 63.0f, 64.0f, 65.0f, 66.0f, 67.0f, 68.0f, 69.0f, 70.0f,
                71.0f, 72.0f, 73.0f, 74.0f, 75.0f, 76.0f, 77.0f, 78.0f, 79.0f, 80.0f,
                81.0f, 82.0f, 83.0f, 84.0f, 85.0f, 86.0f, 87.0f, 88.0f, 89.0f, 90.0f,
                91.0f, 92.0f, 93.0f, 94.0f, 95.0f, 96.0f, 97.0f, 98.0f, 99.0f, 100.0f,
                101.0f, 102.0f, 103.0f, 104.0f, 105.0f, 106.0f, 107.0f, 108.0f, 109.0f, 110.0f,
                111.0f, 112.0f, 113.0f, 114.0f, 115.0f, 116.0f, 117.0f, 118.0f, 119.0f, 120.0f,
                121.0f, 122.0f, 123.0f, 124.0f, 125.0f, 126.0f, 127.0f, 128.0f, 129.0f, 130.0f,
                131.0f, 132.0f, 133.0f, 134.0f, 135.0f, 136.0f, 137.0f, 138.0f, 139.0f, 140.0f,
                141.0f, 142.0f, 143.0f, 144.0f, 145.0f, 146.0f, 147.0f, 148.0f, 149.0f, 150.0f,
                151.0f, 152.0f, 153.0f, 154.0f, 155.0f, 156.0f, 157.0f, 158.0f, 159.0f, 160.0f,
                161.0f, 162.0f, 163.0f, 164.0f, 165.0f, 166.0f, 167.0f, 168.0f, 169.0f, 170.0f,
                171.0f, 172.0f, 173.0f, 174.0f, 175.0f, 176.0f, 177.0f, 178.0f, 179.0f, 180.0f,
                181.0f, 182.0f, 183.0f, 184.0f, 185.0f, 186.0f, 187.0f, 188.0f, 189.0f, 190.0f,
                191.0f, 192.0f, 193.0f, 194.0f, 195.0f, 196.0f, 197.0f, 198.0f, 199.0f, 200.0f,
                201.0f, 202.0f, 203.0f, 204.0f, 205.0f, 206.0f, 207.0f, 208.0f, 209.0f, 210.0f,
                211.0f, 212.0f, 213.0f, 214.0f, 215.0f, 216.0f, 217.0f, 218.0f, 219.0f, 220.0f,
                221.0f, 222.0f, 223.0f, 224.0f, 225.0f, 226.0f, 227.0f, 228.0f, 229.0f, 230.0f,
                231.0f, 232.0f, 233.0f, 234.0f, 235.0f, 236.0f, 237.0f, 238.0f, 239.0f, 240.0f,
                241.0f, 242.0f, 243.0f, 244.0f, 245.0f, 246.0f, 247.0f, 248.0f, 249.0f, 250.0f,
                251.0f, 252.0f, 253.0f, 254.0f, 255.0f, 256.0f, 257.0f, 258.0f, 259.0f, 260.0f,
                261.0f, 262.0f, 263.0f, 264.0f, 265.0f, 266.0f, 267.0f, 268.0f, 269.0f, 270.0f,
                271.0f, 272.0f, 273.0f, 274.0f, 275.0f, 276.0f, 277.0f, 278.0f, 279.0f, 280.0f,
                281.0f, 282.0f, 283.0f, 284.0f, 285.0f, 286.0f, 287.0f, 288.0f, 289.0f, 290.0f,
                291.0f, 292.0f, 293.0f, 294.0f, 295.0f, 296.0f, 297.0f, 298.0f, 299.0f, 300.0f,
                301.0f, 302.0f, 303.0f, 304.0f, 305.0f, 306.0f, 307.0f, 308.0f, 309.0f, 310.0f,
                311.0f, 312.0f, 313.0f, 314.0f, 315.0f, 316.0f, 317.0f, 318.0f, 319.0f, 320.0f,
                321.0f, 322.0f, 323.0f, 324.0f, 325.0f, 326.0f, 327.0f, 328.0f, 329.0f, 330.0f,
                331.0f, 332.0f, 333.0f, 334.0f, 335.0f, 336.0f, 337.0f, 338.0f, 339.0f, 340.0f,
                341.0f, 342.0f, 343.0f, 344.0f, 345.0f, 346.0f, 347.0f, 348.0f, 349.0f, 350.0f,
                351.0f, 352.0f, 353.0f, 354.0f, 355.0f, 356.0f, 357.0f, 358.0f, 359.0f, 360.0f,
                361.0f, 362.0f, 363.0f, 364.0f, 365.0f, 366.0f, 367.0f, 368.0f, 369.0f, 370.0f,
                371.0f, 372.0f, 373.0f, 374.0f, 375.0f, 376.0f, 377.0f, 378.0f, 379.0f, 380.0f,
                381.0f, 382.0f, 383.0f, 384.0f, 385.0f, 386.0f, 387.0f, 388.0f, 389.0f, 390.0f,
                391.0f, 392.0f, 393.0f, 394.0f, 395.0f, 396.0f, 397.0f, 398.0f, 399.0f, 400.0f,
                401.0f, 402.0f, 403.0f, 404.0f, 405.0f, 406.0f, 407.0f, 408.0f, 409.0f, 410.0f,
                411.0f, 412.0f, 413.0f, 414.0f, 415.0f, 416.0f, 417.0f, 418.0f, 419.0f, 420.0f,
                421.0f, 422.0f, 423.0f, 424.0f, 425.0f, 426.0f, 427.0f, 428.0f, 429.0f, 430.0f};

                auto vec2 = vec1;
                for (std::size_t i = 0; i < vec1.size(); i++)
                {
                    benchmark::DoNotOptimize(vec2[i]);
                }
        }
    }
}

    /*
    static void BM_vec2_iterate(benchmark::State& state) {
        line::vec<2,float> vec1(1.0f, 2.0f);

        for (auto _ : state) {
            for (auto it = vec1.begin(); it != vec1.end(); ++it) {
                benchmark::DoNotOptimize(*it);
            }
        }
    }


    static void BM_vec2_iterate2(benchmark::State& state) {
        line::vec<2,float> vec1(1.0f, 2.0f);

        for (auto _ : state) {
            for (std::size_t i = 0; i < vec1.size();  i++) {
                benchmark::DoNotOptimize(vec1[i]);
            }
        }
    }
    */
    /*
    BENCHMARK(BM_vec2_iterate)->Iterations(150000);
    BENCHMARK(BM_vec2_iterate2)->Iterations(150000);
    */
    BENCHMARK(BM_vec2_copy)->Iterations(1500);
    BENCHMARK(BM_vec4_constructor)->Iterations(1500);

    BENCHMARK_MAIN();